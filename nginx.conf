upstream publicly {
	server unix:///srv/publicly/publicly.sock
}

# 配置服务器
#反向代理 
server {
	# 监听的端口号
	listen 80;
	# 域名
	server_name 154.8.200.71;
	charset utf-8;

	# 最大的文件上传尺寸
	client_max_body_size 50M;
	# 静态文件访问的url   费
	location /static {
	    # 静态文件地址
	    alias /srv/publicly/static_dist;
	}

	location /media{
		alias 
	}
	# 最后，发送所有非静态文件请求到django服务器   除了 media与静态文件
	
	location / {
		uwsgi_pass publicly;
		# uwsgi_params文件地址
		include /etc/nginx/uwsgi_params;
	}
}






——————————————————————————————————————————————————————


# 配置服务器
#配置反向代理
#反向代理 
server {
	# 监听的端口号
	listen 80;
	# 域名
	server_name localhost;
	charset utf-8;

	# 最大的文件上传尺寸
	client_max_body_size 50M;
	location / {
		proxy_pass http://localhost:8080;
		proxy_set_header Host $host:$server_port;
	}
}

#配置负载均衡，两台以上的服务器才需要

upstream test{
	server localhost:8080;
	server localhost:8081;   #核心代码  
}
server{
	listen 81;
	server_name localhost;
	client_max_body_size 1024M;
	location/{
		proxy_pass http://test;
		proxy_set_header Host $host:$server_port;
	}

}

#HTTP服务器,Nginx本身也是一个静态资源的服务器，
当只有静态资源的时候，就可以使用Nginx来做服务器，
同时现在也很流行动静分离，就可以通过Nginx来实现，首先看看Nginx做静态资源服务器。
这样如果访问http://localhost 就会默认访问到E盘wwwroot目录下面的index.html，
server{
	listen 81;
	server_name localhost;
	client_max_body_size 1024M;
	location/{
		root e:\wwwroot;
		index index.html;
		
	}

}


#动静分离



